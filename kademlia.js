// Generated by CoffeeScript 1.6.3
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  $(function() {
    var Network, NetworkView, Node, NodeItem, bits, color, force, height, k, network, node, node0, node_id, svg, view, width, _i, _ref, _ref1, _ref2, _ref3;
    k = 5;
    width = 960;
    height = 500;
    bits = 8;
    node_id = 0;
    color = d3.scale.category20();
    force = d3.layout.force().size([width, height]);
    svg = d3.select("body").append("svg").attr("width", width).attr("height", height);
    Node = (function(_super) {
      __extends(Node, _super);

      function Node() {
        this.get_links = __bind(this.get_links, this);
        _ref = Node.__super__.constructor.apply(this, arguments);
        return _ref;
      }

      Node.prototype.initialize = function(node) {
        var num,
          _this = this;
        this.set("buckets", (function() {
          var _i, _ref1, _results;
          _results = [];
          for (num = _i = 0, _ref1 = bits - 1; 0 <= _ref1 ? _i <= _ref1 : _i >= _ref1; num = 0 <= _ref1 ? ++_i : --_i) {
            _results.push([]);
          }
          return _results;
        })());
        this.set("id", node_id);
        if (node !== null) {
          this.add_node(node);
          node.find_node(this, this.id, function(nodes) {
            var n, _i, _len, _results;
            console.log("node " + node_id);
            console.log(nodes);
            _results = [];
            for (_i = 0, _len = nodes.length; _i < _len; _i++) {
              n = nodes[_i];
              _results.push(_this.add_node(n));
            }
            return _results;
          });
        }
        return node_id++;
      };

      Node.prototype.pick_bucket = function(key) {};

      Node.prototype.xor = function(key) {
        return this.get("id") ^ key;
      };

      Node.prototype.find_bucket = function(key) {
        var dist, i;
        dist = this.xor(key);
        i = 0;
        while (!((dist >> i) === 0)) {
          i++;
        }
        return i;
      };

      Node.prototype.add_node = function(node) {
        var buckets, i, id, n, temp, _fn, _i, _len, _ref1;
        id = node.get("id");
        if (id === this.id) {
          return null;
        }
        temp = false;
        i = this.find_bucket(id);
        buckets = this.get("buckets");
        console.log("ADD node: " + id + " to node: " + this.id);
        console.log(node);
        console.log(buckets[i]);
        _ref1 = buckets[i];
        _fn = function(n) {
          if (id === n.get("id")) {
            return temp = true;
          }
        };
        for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
          n = _ref1[_i];
          _fn(n);
        }
        if (temp) {
          return null;
        }
        console.log("after");
        return buckets[i].push(node);
      };

      Node.prototype.ping_node = function(id, callback) {
        var buckets;
        buckets = this.get("buckets");
        return console.log("Node buckets: " + buckets);
      };

      Node.prototype.store_value = function(source, key, val) {};

      Node.prototype.find_node = function(source, id, callback) {
        this.add_node(source);
        return callback(this.get("buckets")[this.find_bucket(id)]);
      };

      Node.prototype.find_value = function(source, key, callback) {};

      Node.prototype.linkify = function(node) {
        return {
          "source": this,
          "target": node,
          "distance": this.xor(node.get("id"))
        };
      };

      Node.prototype.get_links = function() {
        var links,
          _this = this;
        links = _.foldl(this.get("buckets"), function(init, nodes) {
          var node, _i, _len;
          for (_i = 0, _len = nodes.length; _i < _len; _i++) {
            node = nodes[_i];
            init.push(_this.linkify(node));
          }
          return init;
        }, []);
        return links;
      };

      return Node;

    })(Backbone.Model);
    Network = (function(_super) {
      __extends(Network, _super);

      function Network() {
        _ref1 = Network.__super__.constructor.apply(this, arguments);
        return _ref1;
      }

      Network.prototype.model = Node;

      Network.prototype.get_links = function() {
        return _.foldl(this.models, function(init, model) {
          return init.concat(model.get_links());
        }, []);
      };

      Network.prototype.test = function() {
        this.models[4].add_node(this.models[3]);
        this.models[4].add_node(this.models[6]);
        this.models[4].add_node(this.models[8]);
        this.models[7].add_node(this.models[9]);
        this.models[9].add_node(this.models[2]);
        this.models[11].add_node(this.models[6]);
        return this.models[12].add_node(this.models[6]);
      };

      return Network;

    })(Backbone.Collection);
    NetworkView = (function(_super) {
      __extends(NetworkView, _super);

      function NetworkView() {
        _ref2 = NetworkView.__super__.constructor.apply(this, arguments);
        return _ref2;
      }

      NetworkView.prototype.el = '.network-view';

      NetworkView.prototype.initialize = function() {
        console.log('init');
        this.listenTo(this.collection, {
          add: this.addNode
        });
        return this.render();
      };

      NetworkView.prototype.render = function() {
        var link, links, node, nodes;
        this.$el.html("<h1>Kademlia Network Simulation</h1>");
        links = this.collection.get_links();
        nodes = this.collection.models;
        console.log(links);
        force.nodes(nodes).links(links).charge(-800).linkDistance(function(link, i) {
          return link.distance * 10;
        }).start();
        link = svg.selectAll(".link").data(links).enter().append("line").attr("class", "link").style("stroke-width", 3);
        console.log(link);
        node = svg.selectAll(".node").data(nodes).enter().append("circle").attr("class", "node").attr("r", 9).style("fill", color(3)).style("stroke-width", 2);
        node.append("title").text(function(d) {
          return "Node " + d.id;
        });
        console.log(node);
        return force.on("tick", function() {
          link.attr("x1", function(d) {
            return d.source.x;
          }).attr("y1", function(d) {
            return d.source.y;
          }).attr("x2", function(d) {
            return d.target.x;
          }).attr("y2", function(d) {
            return d.target.y;
          });
          return node.attr("cx", function(d) {
            return d.x;
          }).attr("cy", function(d) {
            return d.y;
          });
        });
      };

      NetworkView.prototype.addNode = function(node) {
        var item;
        console.log("add");
        console.log(node);
        item = new NodeItem({
          model: node
        });
        return this.$("ul").append(item.render().el);
      };

      NetworkView.prototype.events = {
        "keypress .js-kad-ping": function(e) {
          var $this, key;
          key = e.keyCode || e.which;
          $this = $(e.currentTarget);
          console.log($this);
          if (key === 13 && $this.val() !== "") {
            console.log("if");
            this.collection.add(new Node());
            return $this.val("");
          }
        },
        "keypress .js-kad-store": function(e) {},
        "keypress .js-kad-find-node": function(e) {},
        "keypress .js-kad-find-val": function(e) {},
        "keypress .js-kad-delete": function(e) {}
      };

      return NetworkView;

    })(Backbone.View);
    NodeItem = (function(_super) {
      __extends(NodeItem, _super);

      function NodeItem() {
        _ref3 = NodeItem.__super__.constructor.apply(this, arguments);
        return _ref3;
      }

      NodeItem.prototype.initialize = function() {
        return console.log('init item');
      };

      NodeItem.prototype.render = function() {
        console.log("render item");
        console.log(this);
        return this;
      };

      return NodeItem;

    })(Backbone.View);
    network = new Network;
    node0 = new Node(null);
    network.add(node0);
    for (node = _i = 0; _i <= 19; node = ++_i) {
      network.add(new Node(node0));
    }
    return view = new NetworkView({
      collection: network
    });
  });

}).call(this);
